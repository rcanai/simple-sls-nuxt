service: ${self:custom.PARAMS.NODE_ENV}-slsnuxt

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.PARAMS.NODE_ENV}
  region: ap-northeast-1
  logRetentionInDays: 7
  apiKeys:
    - name: ${self:custom.PARAMS.NODE_ENV}-slsnuxt-apiKey
      value: ${self:custom.PARAMS.API_KEY}
  environment:
    NODE_ENV: ${self:custom.PARAMS.NODE_ENV}

functions:
  app:
    handler: server/lambda.handler
    timeout: 30
    memorySize: 512
    environment:
      NODE_ENV: ${self:custom.PARAMS.NODE_ENV}
    events:
      - http:
          path: '/'
          method: GET
          private: true
          cors: true
      - http:
          path: '/{proxy+}'
          method: GET
          private: true
          cors: true

package:
  excludeDevDependencies: true
  exclude:
    - .**
    - aws/**
    - client/**
    - README.md
    - package.json
    - jsconfig.json
    - yarn.lock
    # 不要なモジュールを除外
    - node_modules/.cache/**
    - node_modules/@babel/**
    - node_modules/@types/**
    - node_modules/@types**/**
    - node_modules/@nuxtjs/eslint/**
    - node_modules/@nuxtjs/eslint**/**
    - node_modules/aws-sdk/**
    - node_modules/babel**/**
    - node_modules/browserify**/**
    - node_modules/eslint/**
    - node_modules/eslint**/**
    - node_modules/postcss/**
    - node_modules/postcss**/**
    - node_modules/prettier/**
    - node_modules/webpack/**
    - node_modules/webpack**/**

plugins:
  - serverless-apigw-binary
  - serverless-prune-plugin
  - serverless-s3-sync

custom:
  PARAMS: ${file(aws/sls-params.js)}
  lambdaFunctionAssociations:
    true:
      - EventType: viewer-request
        LambdaFunctionARN: ${self:custom.PARAMS.LAMBDA_ARN}
    false:
      - []
  apigwBinary:
    types:
      - '*/*'
  prune:
    automatic: true
    number: 3
  s3Sync:
    - bucketName: ${self:custom.PARAMS.S3_BUCKET_NAME}
      acl: public-read
      bucketPrefix: ""
      localDir: "client/static"
    # - bucketName: ${self:custom.PARAMS.S3_BUCKET_NAME}
    #   acl: public-read
    #   bucketPrefix: '_nuxt/images'
    #   localDir: '.nuxt/dist/client/images'

# CloudFormation
resources:
  Resources:
    # ------
    # S3: 静的ファイル用のS3バケット
    # ------
    StaticS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.PARAMS.S3_BUCKET_NAME}
        AccessControl: Private

    # ------
    # S3: 静的ファイル用のS3バケットポリシー
    # ------
    StaticS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticS3Bucket
        PolicyDocument:
          Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - " "
                  - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity"
                    - Ref: CFOriginAccessIdentity
            Resource: "arn:aws:s3:::${self:custom.PARAMS.S3_BUCKET_NAME}/*"

    # ------
    #  Cloud Front AccessIdentity: 静的ファイル用のIdentity
    # ------
    CFOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment:
            Ref: AWS::StackName

    # ------
    # Cloud Front
    # ------
    FrontEndCFDist:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          # Alias(CNAMEs)の設定はSSL証明書の設定が必要
          Aliases:
            - ${self:custom.PARAMS.FULL_DOMAIN}
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.PARAMS.SSL_ARN}
            MinimumProtocolVersion: TLSv1_2016 # 現時点でのRecommended
            SslSupportMethod: sni-only
          Origins:
            - Id: ApiGwOriginId
              DomainName:
                Fn::Join:
                  - " "
                  - - Ref: ApiGatewayRestApi
                    - ".execute-api.ap-northeast-1.amazonaws.com"
              OriginPath: "/${self:custom.PARAMS.NODE_ENV}"
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: match-viewer
              OriginCustomHeaders:
                - HeaderName: "X-API-KEY"
                  HeaderValue: ${self:custom.PARAMS.API_KEY}
            - Id: StaticS3Bucket
              DomainName: StaticS3Bucket.DomainName
              OriginPath: ""
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ""
                    - - "origin-access-identity/cloudfront/"
                      - Ref: CFOriginAccessIdentity
          Enabled: true
          HttpVersion: http2 # SSL証明書が必要
          Comment:
            Ref: AWS::StackName
          DefaultRootObject: ""
          DefaultCacheBehavior:
            TargetOriginId: ApiGwOriginId
            ViewerProtocolPolicy: redirect-to-https
            LambdaFunctionAssociations: ${self:custom.lambdaFunctionAssociations.${self:custom.PARAMS.HAS_LAMBDA}}
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: all
            Compress: true
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
          CacheBehaviors:
            - TargetOriginId: StaticS3Bucket
              PathPattern: "/favicon.ico"
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
              Compress: true
            - TargetOriginId: StaticS3Bucket
              PathPattern: "/sw.js"
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
              Compress: true
            - TargetOriginId: StaticS3Bucket
              PathPattern: "/*.png"
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
              Compress: true
            - TargetOriginId: StaticS3Bucket
              PathPattern: "/_nuxt/images/*"
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
              Compress: true
          CustomErrorResponses:
            - ErrorCode: 403
              ErrorCachingMinTTL: 0
              ResponseCode: 404
              ResponsePagePath: "/404"

    # ------
    # Route53 RecordSet
    # ------
    Route53RecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: "${self:custom.PARAMS.DOMAIN}."
        Name: "${self:custom.PARAMS.FULL_DOMAIN}."
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # CloudFrontなのでIDは固定
          DNSName:
            Fn::GetAtt: [FrontEndCFDist, DomainName]

  # 出力値
  Outputs:
    StaticS3BucketDomainName:
      Value:
        Fn::GetAtt: StaticS3Bucket.DomainName
      Export:
        Name: StaticS3BucketDomainName
    ApiGatewayRestApiId001:
      Value:
        Ref: ApiGatewayRestApi # APIGWのID (Serverlessの仕様)
      Export:
        Name: ApiGatewayRestApiId


