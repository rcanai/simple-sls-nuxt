service: simple-sls-nuxt

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${self:custom.PARAMS.NODE_ENV}
  profile: "" # AWS_PROFILE
  region: ap-northeast-1
  logRetentionInDays: 7
  apiKeys:
    - name: simple-sls-nuxt-apiKey
      value: ${self:custom.PARAMS.API_KEY}
  environment:
    NODE_ENV: ${self:custom.PARAMS.NODE_ENV}

functions:
  app:
    handler: server/lambda.nuxt
    timeout: 30
    memorySize: 512
    environment:
      NODE_ENV: ${self:custom.PARAMS.NODE_ENV}
    events:
      - http:
          path: '/'
          method: GET
          private: true
          cors: true
      - http:
          path: '/{proxy+}'
          method: GET
          private: true
          cors: true

package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - .**
    - aws/**
    - client/**
    - README.md
    - package.json
    - jsconfig.json
    - sls-params.example.js
    - sls-params.js
    - yarn.lock
    # 軽くなるかも
    - node_modules/.cache/**
    - node_modules/@babel/**
    - node_modules/@types/**
    - node_modules/@types**/**
    - node_modules/@nuxtjs/eslint/**
    - node_modules/@nuxtjs/eslint**/**
    - node_modules/aws-sdk/**
    - node_modules/babel**/**
    - node_modules/browserify**/**
    - node_modules/eslint/**
    - node_modules/eslint**/**
    - node_modules/postcss/**
    - node_modules/postcss**/**
    - node_modules/webpack/**
    - node_modules/webpack**/**

plugins:
  - serverless-apigw-binary
  - serverless-prune-plugin
  - serverless-s3-sync

custom:
  PARAMS: ${file(aws/sls-params.js)}
  apigwBinary:
    types:
      - '*/*'
  prune:
    automatic: true
    number: 3
  s3Sync:
    - bucketName: ${self:custom.PARAMS.S3_BUCKET_NAME}
      acl: public-read
      bucketPrefix: ''
      localDir: 'client/static'
    # - bucketName: ${self:custom.PARAMS.S3_BUCKET_NAME}
    #   acl: public-read
    #   bucketPrefix: '_nuxt/images'
    #   localDir: '.nuxt/dist/client/images'

resources:
  Resources:
    # S3: 静的ファイル用のS3バケット
    SimpleSlsNuxtStaticS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.PARAMS.S3_BUCKET_NAME}
        AccessControl: Private
    # S3: 静的ファイル用のS3バケットポリシー
    SimpleSlsNuxtPublicS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: SimpleSlsNuxtStaticS3Bucket
        PolicyDocument:
          Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - " "
                  - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity"
                    - Ref: SimpleSlsNuxtCFOriginAccessIdentity
            Resource: "arn:aws:s3:::${self:custom.PARAMS.S3_BUCKET_NAME}/*"
    # Cloud Front: 静的ファイル用のIdentity
    SimpleSlsNuxtCFOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment:
            Ref: AWS::StackName
  Outputs:
    SimpleSlsNuxtCFOriginAccessIdentity:
      Value:
        Ref: SimpleSlsNuxtCFOriginAccessIdentity
      Export:
        Name: SimpleSlsNuxtCFOriginAccessIdentity
    SimpleSlsNuxtStaticS3BucketDomainName:
      Value:
        Fn::GetAtt: SimpleSlsNuxtStaticS3Bucket.DomainName
      Export:
        Name: SimpleSlsNuxtStaticS3BucketDomainName
